# Enter your code here. Read input from STDIN. Print output to STDOUT
# determine if a number is prime
# determine if the prime number is a palindromic prime (reversing the order of number looks the same)
# to determine if a prime number is palindromic prime, convert to string, reverse and compare the two

# brute force method to determine is a number is prime
# improve algorithm to find prime, this should be a lot faster!!
# Ruby has a Prime class which won't be used here
def is_prime?(num)
  # a number is prime if it has 1 or itself as a divisor
  2.upto(Math.sqrt(num).to_i) { |n| return false if num % n == 0 }
  return true
end

def is_palindrome?(num)
  num.to_s == num.to_s.reverse
end

n_palindrome_array = -> (arr_size) do 
  2.upto(Float::INFINITY).lazy.select { |x| is_prime?(x) && is_palindrome?(x) }.first(arr_size) 
end

p n_palindrome_array.call(gets.to_i)